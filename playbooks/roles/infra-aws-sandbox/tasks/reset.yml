---
- name: Grab or create the public zone
  environment:
    AWS_ACCESS_KEY_ID: "{{ assumed_role.sts_creds.access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ assumed_role.sts_creds.secret_key }}"
    AWS_SESSION_TOKEN: "{{ assumed_role.sts_creds.session_token }}"
  route53_zone:
    zone: "{{ account_name }}{{subdomain_base}}."
  register: _route53zone
  retries: 5
  delay: "{{ 60|random(start=3, step=1) }}"
  until: _route53zone is succeeded

- name: Cleanup DNS Zone
  include_tasks: clean_zone.yml
  vars:
    _hostedzoneid: "{{ _route53zone.zone_id }}"
    aws_public_zone: "{{ account_name }}{{subdomain_base}}."

- tags: nuke
  when: nuke_sandbox | bool
  block:
    - name: Set fact for filtered resources
      set_fact:
        aws_nuke_filters:
          Route53HostedZone:
            - "{{ account_name }}{{ subdomain_base }}."
            - /hostedzone/{{ _route53zone.zone_id }} ({{ account_name }}{{ subdomain_base }}.)

    - name: check if /tmp/aws_nuke_filters.json exists
      stat:
        path: /tmp/aws_nuke_filters.json
      register: _stat

    - name: Load /tmp/aws_nuke_filters.json and merge it into aws_nuke_filters
      when: _stat.stat.exists
      set_fact:
        aws_nuke_filters: "{{ aws_nuke_filters | combine(_aws_nuke_filters) }}"
      vars:
        _aws_nuke_filters: "{{ lookup('file', '/tmp/aws_nuke_filters.json') | from_json | default({}) }}"

    - name: Generate config file for aws-nuke
      template:
        src: "{{ role_path }}/templates/nuke-config.yml.j2"
        dest: "{{ output_dir }}/{{ account_name }}_nuke-config.yml"

    - name: Generate config file for aws-nuke-legacy
      template:
        src: "{{ role_path }}/templates/nuke-config-legacy.yml.j2"
        dest: "{{ output_dir }}/{{ account_name }}_nuke-config-legacy.yml"

    - name: Run aws-nuke on sandbox account
      command: >-
        {{ aws_nuke_binary_path }} nuke --profile {{ account_name }}
        -c "{{ output_dir }}/{{ account_name }}_nuke-config.yml"
        --no-dry-run
        --force
      args:
        stdin: "{{ account_name }}{{ alias_suffix }}"
      register: _awsnuke
      ignore_errors: true
      retries: "{{ aws_nuke_retries }}"
      until: _awsnuke is succeeded
      no_log: true
      async: 3600
      poll: 30
      delay: 30
      changed_when: >-
        'No resource to delete.' not in _awsnuke.stdout_lines

    - debug:
        # stdout and stderr are really not human friendly. keep stdout_lines and stdin_lines
        var: >-
          _awsnuke
          | dict2items
          | selectattr('key', 'ne', 'stdout')
          | selectattr('key', 'ne', 'stderr')
          | items2dict

    - when: _awsnuke is failed
      block:

        # Get a new token as the current one may have timed out (1h)
        - include_tasks: assume.yml
        - include_tasks: global_manual_cleanup.yml

        - include_tasks: manual_cleanup.yml
          loop: "{{ all_regions }}"
          loop_control:
            loop_var: _region

        - name: Run aws-nuke again
          when: run_aws_nuke_again | default(false)
          command: >-
            {{ aws_nuke_binary_path }} nuke --profile {{ account_name }}
            -c "{{ output_dir }}/{{ account_name }}_nuke-config.yml"
            --no-dry-run
            --force
          args:
            stdin: "{{ account_name }}{{ alias_suffix }}"
          register: _awsnuke2
          ignore_errors: true
          retries: 0
          until: _awsnuke2 is succeeded
          no_log: true
          # second time shouldn't take too long
          async: 1800
          poll: 30
          delay: 30
          changed_when: >-
            'No resource to delete.' not in _awsnuke.stdout_lines

        - debug:
            var: >-
              _awsnuke2
              | dict2items
              | selectattr('key', 'ne', 'stdout')
              | selectattr('key', 'ne', 'stderr')
              | items2dict

    - name: Run aws-nuke legacy on sandbox account
      when: run_aws_nuke_legacy | default(false) | bool
      # be on the safe side, run the official (unmaintained) binary
      command: >-
        {{ aws_nuke_legacy_binary_path }}
        --profile {{ account_name }}
        -c "{{ output_dir }}/{{ account_name }}_nuke-config-legacy.yml"
        --no-dry-run
        --force
      args:
        stdin: "{{ account_name }}{{ alias_suffix }}"
      register: _awsnuke_legacy
      ignore_errors: true
      retries: "{{ aws_nuke_legacy_retries | default(0) }}"
      until: _awsnuke_legacy is succeeded
      changed_when: >-
        'No resource to delete.' not in _awsnuke_legacy.stdout_lines
      no_log: true
      async: 1800
      poll: 30
      delay: 30

    - debug:
        var: >-
          _awsnuke_legacy
          | dict2items
          | selectattr('key', 'ne', 'stdout')
          | selectattr('key', 'ne', 'stderr')
          | items2dict
      when: run_aws_nuke_legacy | default(false) | bool

    - name: Report aws-nuke error
      fail:
        msg: aws-nuke failed
      when:
        - _awsnuke is failed
        - _awsnuke2 is failed or _awsnuke2 is skipped

    - name: Report aws-nuke-legacy error
      fail:
        msg: aws-nuke-legacy failed
      when: _awsnuke_legacy is failed

    - name: Report aws-nuke-legacy deleted resource(s)
      fail:
        msg: aws-nuke-legacy deleted resource(s). That should be investigated and reported.
      when: _awsnuke_legacy is changed
