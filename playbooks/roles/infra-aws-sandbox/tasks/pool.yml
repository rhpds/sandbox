---
- name: Check if account exists in the DB
  vars:
    _data:
      name:
        S: "{{ account_name }}"
  command: >-
    {{ aws_cli }} --profile {{ dynamodb_profile }} --region {{ dynamodb_region }}
    dynamodb get-item
    --table-name {{ dynamodb_table }}
    --key '{{ _data | to_json }}'
  register: _getaccount

- debug:
    var: _getaccount

- name: Create account in DB if it doesn't exist
  vars:
    _data:
      name:
        S: "{{ account_name }}"
      available:
        BOOL: "{{ available_after_create }}"
      account_id:
        S: "{{ account_id }}"
      aws_access_key_id:
        S: "{{ account_user_access_key }}"
      aws_secret_access_key:
        S: "{{ account_user_secret_access_key_encrypted }}"
      hosted_zone_id:
        S: "{{ account_hosted_zone_id }}"
      zone:
        S: "{{ account_name }}{{subdomain_base}}"
  command: >-
    {{ aws_cli }} --profile {{ dynamodb_profile }} --region {{ dynamodb_region }}
    dynamodb put-item
    --table-name {{ dynamodb_table }}
    --item '{{ _data | to_json }}'
  register: _putaccount
  when: _getaccount.stdout == '' or force_create or update_stage

- debug:
    var: _putaccount

- when: operation == 'RESET'
  block:
    - name: Get sandbox reservation
      vars:
        _data:
          name:
            S: "{{ account_name }}"
      command: >-
        {{ aws_cli }} --profile {{ dynamodb_profile | quote }}
        --region {{ dynamodb_region | quote }}
        dynamodb get-item
        --table-name {{ dynamodb_table }}
        --key '{{ _data | to_json }}'
        --query 'Item.reservation'
        --output text
      register: r_get_reservation
      changed_when: false

    - name: Save some values for after cleanup
      set_fact:
        sandbox_reservation: "{{ r_get_reservation.stdout }}"

    - name: Get external_id
      vars:
        _data:
          name:
            S: "{{ account_name }}"
      command: >-
        {{ aws_cli }} --profile {{ dynamodb_profile | quote }}
        --region {{ dynamodb_region | quote }}
        dynamodb get-item
        --table-name {{ dynamodb_table }}
        --key '{{ _data | to_json }}'
        --query 'Item.external_id'
        --output text
      register: r_get_external_id
      changed_when: false

    - name: Save some values for after cleanup
      set_fact:
        external_id: "{{ r_get_external_id.stdout }}"

    - when: sandbox_reservation | default("", true) not in ["", "None", "null"]
      set_fact:
        additional_data:
          reservation:
            S: "{{ sandbox_reservation }}"
          external_id:
            S: "{{ external_id }}"

    - when: sandbox_reservation | default("", true) in ["", "None", "null"]
      set_fact:
        additional_data: {}

    - name: Pre-Reset account information for validation
      vars:
        _data:
          name:
            S: "{{ account_name }}"
          available:
            BOOL: false
          account_id:
            S: "{{ account_id }}"
          aws_access_key_id:
            S: "{{ account_user_access_key }}"
          aws_secret_access_key:
            S: "{{ account_user_secret_access_key_encrypted }}"
          hosted_zone_id:
            S: "{{ account_hosted_zone_id }}"
          zone:
            S: "{{ account_name }}{{subdomain_base}}"
          comment:
            S: "validation in progress"
      command: >-
        {{ aws_cli }} --profile {{ dynamodb_profile }}
        --region {{ dynamodb_region }}
        dynamodb put-item
        --table-name {{ dynamodb_table }}
        --item '{{ _data | combine(additional_data | default({}), recursive=True) | to_json }}'

    - name: Validate Sandbox
      include_tasks: validate.yaml

    - name: Reset account information
      vars:
        _data:
          name:
            S: "{{ account_name }}"
          available:
            BOOL: "{{ available_after_reset }}"
          account_id:
            S: "{{ account_id }}"
          aws_access_key_id:
            S: "{{ account_user_access_key }}"
          aws_secret_access_key:
            S: "{{ account_user_secret_access_key_encrypted }}"
          hosted_zone_id:
            S: "{{ account_hosted_zone_id }}"
          zone:
            S: "{{ account_name }}{{subdomain_base}}"
      command: >-
        {{ aws_cli }} --profile {{ dynamodb_profile }}
        --region {{ dynamodb_region }}
        dynamodb put-item
        --table-name {{ dynamodb_table }}
        --item '{{ _data | combine(additional_data | default({}), recursive=True) | to_json }}'
      register: _resetaccount
