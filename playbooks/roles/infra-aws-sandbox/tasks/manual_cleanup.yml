---
- environment:
    AWS_REGION: "{{ _region }}"
    AWS_DEFAULT_REGION: "{{ _region }}"
    AWS_ACCESS_KEY_ID: "{{ assumed_role.sts_creds.access_key }}"
    AWS_SECRET_ACCESS_KEY: "{{ assumed_role.sts_creds.secret_key }}"
    AWS_SESSION_TOKEN: "{{ assumed_role.sts_creds.session_token }}"
  ignore_errors: true
  block:
    - debug:
        var: _region

    - name: Run files/manual_cleanup.py script
      script: files/manual_cleanup.py
      register: r_manual_cleanup
      # timeout after 2 minutes
      timeout: 120
      changed_when: >-
        'Changes were made' in r_manual_cleanup.stdout

    - name: Print output of manual_cleanup.py
      debug:
        var: r_manual_cleanup

    - when: r_manual_cleanup is changed
      set_fact:
        run_aws_nuke_again: true

    # Reject all VPC connections

    - name: Get all VPC endpoint connections
      command: >-
         {{ aws_cli }} ec2 --region {{ _region | quote }}
         describe-vpc-endpoint-connections
         --query VpcEndpointConnections[] --output json

      register: r_connections
      changed_when: false

    - name: Reject all VPC endpoint connections
      loop: "{{ r_connections.stdout | from_json }}"
      loop_control:
        loop_var: conn
      command: >-
        {{ aws_cli }} ec2 --region {{ _region | quote }}
        reject-vpc-endpoint-connections
        --service-id {{ conn.ServiceId }}
        --vpc-endpoint-ids {{ conn.VpcEndpointId }}

    # Security groups

    - name: Get all security groups
      register: r_all_sg
      ec2_group_info:

    - when: r_all_sg.security_groups | length > 0
      block:
        - name: Clean up all ingress and egress rules
          loop: "{{ r_all_sg.security_groups }}"
          loop_control:
            loop_var: _sg
          ec2_group:
            rules: []
            rules_egress: []
            name: "{{ _sg.group_name }}"
            description: "{{ _sg.description }}"
            vpc_id: "{{ _sg.vpc_id }}"

        - set_fact:
            run_aws_nuke_again: true

    # Access Points
    - name: List all Access points
      command: >-
        {{ aws_cli }} s3control list-access-points
        --account {{ account_id | quote }}
        --region {{ _region | quote }}
      register: r_access_points
      changed_when: false

    - name: List all multi-region access points (us-west-2 only)
      command: >-
        {{ aws_cli }} s3control list-multi-region-access-points
        --account {{ account_id | quote }}
        --region us-west-2
      register: r_access_points_multi
      changed_when: false


    - when: >-
        (r_access_points.stdout | from_json).AccessPointList
        | default([])  | length > 0
      block:
        - name: Delete all access points
          loop: >-
            {{ (r_access_points.stdout | from_json).AccessPointList
            | default([]) }}
          command: >-
            {{ aws_cli }} s3control delete-access-point
            --account-id {{ account_id | quote }}
            --name {{ item.Name | quote }}
            --region {{ _region | quote }}

        - set_fact:
            run_aws_nuke_again: true

    # delete all multi-region access points
    - when: >-
        (r_access_points_multi.stdout | from_json).AccessPoints
        | default([])  | length > 0
      block:
        - name: Delete all multi-region access points
          loop: >-
            {{ (r_access_points_multi.stdout | from_json).AccessPoints
            | default([]) }}
          command: >-
            {{ aws_cli }} s3control delete-multi-region-access-point
            --region us-west-2
            --account-id {{ account_id | quote }}
            --detail Name={{ item.Name | quote }}

        - set_fact:
            run_aws_nuke_again: true

    # FSx filesystem cleanup
    - name: List all fsx volumes
      command: >-
        {{ aws_cli }} --region {{ _region }}
        fsx describe-volumes
        --query 'Volumes[*].VolumeId' --output json
      register: r_fsx_volumes
      changed_when: false

    - when: >-
        r_fsx_volumes.stdout | default('[]', true)
        | from_json | default([]) | length > 0
      block:
        - name: Delete all fsx volumes
          loop: >-
            {{ r_fsx_volumes.stdout | default('[]', true)
            | from_json | default([]) }}
          command: >-
            {{ aws_cli }} --region {{ _region }}
            fsx delete-volume
            --volume-id {{ item | quote }}
            --ontap-configuration SkipFinalBackup=true

        - set_fact:
            run_aws_nuke_again: true

    - name: List all storage virtual machine
      command: >-
        {{ aws_cli }} --region {{ _region }}
        fsx describe-storage-virtual-machines
        --query 'StorageVirtualMachines[*].StorageVirtualMachineId' --output json
      register: r_fsx_svms
      changed_when: false

    - when: >-
        r_fsx_svms.stdout | default('[]', true)
        | from_json | default([]) | length > 0
      block:
        - name: Delete all storage virtual machine
          loop: >-
            {{ r_fsx_svms.stdout | default('[]', true)
            | from_json | default([]) }}
          command: >-
            {{ aws_cli }} --region {{ _region }}
            fsx delete-storage-virtual-machine
            --storage-virtual-machine-id {{ item | quote }}

        - set_fact:
            run_aws_nuke_again: true

    - name: List all fsx filesystem
      command: >-
        {{ aws_cli }} --region {{ _region }}
        fsx describe-file-systems
        --query 'FileSystems[*].FileSystemId' --output json

      register: r_fsx_filesystems
      changed_when: false

    - when: >-
        r_fsx_filesystems.stdout | default('[]', true)
        | from_json | default([]) | length > 0
      block:
        - name: Delete all fsx filesystems
          loop: >-
            {{ r_fsx_filesystems.stdout | default('[]', true)
            | from_json | default([]) }}
          command: >-
            {{ aws_cli }} --region {{ _region }}
            fsx delete-file-system
            --file-system-id {{ item | quote }}

        - set_fact:
            run_aws_nuke_again: true

    # Directory Service cleanup

    - name: List all directory services (ds)
      command: >-
        {{ aws_cli }} --region {{ _region }}
        ds describe-directories
        --query 'DirectoryDescriptions[*].DirectoryId' --output json
      register: r_ds_directories
      changed_when: false

    - when: >-
        r_ds_directories.stdout | default('[]', true)
        | from_json | default([]) | length > 0
      block:
        - name: Delete all directory services (ds)
          loop: >-
            {{ r_ds_directories.stdout | default('[]', true)
            | from_json | default([]) }}
          shell: |-
            # Deregister workspaces associate to this DS
            {{ aws_cli }} --region {{ _region }} workspaces deregister-workspace-directory --directory-id {{ item | quote }}

            sleep 5

            {{ aws_cli }} --region {{ _region }} ds delete-directory --directory-id {{ item | quote }}

        - set_fact:
            run_aws_nuke_again: true
